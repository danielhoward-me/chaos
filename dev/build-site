#!/bin/bash

cd "$( dirname "${BASH_SOURCE[0]}" )"
cd ..

function build_site {
	if [[ $1 == "v1."* ]]; then
		echo "Building using golang build script"
		cd ./build
		if [[ $1 == "v1.0.0" ]]; then
			go run . -out-dir ../dist -public-dir ../public
		else
			go run . -out-dir ../dist -public-dir ../public -app-version $1
		fi
		cd ..
	else
		NODE_VERSION=""
		if [[ $1 == "v2"* ]]; then
			NODE_VERSION="18.16.0"
		fi

		if [[ "$(which node)" == "" || $(node -v) != "v$NODE_VERSION" ]]; then
			if [ "$(which nvm)" == "" ]; then
				echo "nvm not installed, installing..."
				install_nvm
			fi

			echo "Installing node $NODE_VERSION"
			nvm install $NODE_VERSION
			
			echo "Installing yarn"
			npm install -g yarn
		fi

		echo "Installing dependencies"
		yarn install --prod

		if [[ $1 == "staging" ]]; then
			export "STAGING_BUILD=true"
		else
			export "STAGING_BUILD="
		fi

		echo "Building webpack"
		yarn build

		set STAGING_BUILD=false
	fi
}

function install_nvm {
	curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
}

NGINX_CONFIG_TEMPLATE=$(cat dev/nginx.conf.template)
function process_nginx_config_template {
	SUB_DOMAIN=$1
	if [[ $SUB_DOMAIN != "" ]]; then
		SUB_DOMAIN="$SUB_DOMAIN."
	fi

	echo $(echo "$NGINX_CONFIG_TEMPLATE" | sed "s/{{SUB_DOMAIN}}/$SUB_DOMAIN/g" | sed "s/{{FILE_PATH}}/$2/g")
}

CURRENT_BRANCH=$(git branch --show-current)
LATEST_TAG=$(git describe --tags --abbrev=0)
CURRENT_DETHEAD_VALUE=$(git config advice.detachedHead)
git config advice.detachedHead false

function clean_up {
	git checkout "$CURRENT_BRANCH"
	git config advice.detachedHead "$CURRENT_DETHEAD_VALUE"
}

function on_exit() {
	echo "Program is exiting, cleaning up"
	clean_up
	exit 0
}

function on_error() {
	echo "Program has errored, cleaning up"
	clean_up
	rm -rf $BUILD_DIR
	rm -rf dist
	exit 1
}

trap on_error ERR
trap on_exit SIGINT

BUILD_DIR="/var/www/chaos.danielhoward.me"
rm -rf $BUILD_DIR
mkdir -p $BUILD_DIR

echo "Fetching site versions"
site_versions=( $(git tag) staging )

NGINX_CONFIG_FILE=""

for version in "${site_versions[@]}"
do
	echo "Checking out version $version"
	git reset --hard
	git checkout "$version"

	echo "Building site version $version"
	build_site "$version"

	version_dir_name=${version//./-}
	version_dir="$BUILD_DIR/$version_dir_name"
	mkdir -p "$version_dir"
	echo "Copying build to $version_dir"
	cp -r dist/* "$version_dir"

	if [[ $version == $LATEST_TAG ]]; then
		echo "Copying build to $BUILD_DIR/latest"
		mkdir -p "$BUILD_DIR/latest"
		cp -r dist/* "$BUILD_DIR/latest"

		echo "Generating nginx config for latest"
		NGINX_CONFIG_FILE="$NGINX_CONFIG_FILE$(process_nginx_config_template "" "latest")"
	fi

	rm -rf dist

	echo "Finished building version $version"

	echo "Generating nginx config for $version"
	NGINX_CONFIG_FILE="$NGINX_CONFIG_FILE$(process_nginx_config_template "$version_dir_name" "$version_dir_name")"
done

echo "Saving nginx config"
mkdir -p /etc/nginx/conf.d
echo "$NGINX_CONFIG_FILE" > /etc/nginx/conf.d/default.conf

clean_up
